{"version":3,"sources":["components/Input.js","components/RunButton.js","redux/reducers/tasksReducer.js","redux/actions.js","redux/reducers/inputValueReducer.js","redux/reducers/runTaskReducer.js","redux/reducers/timerDurationReducer.js","redux/reducers/startTimeReducer.js","redux/store.js","localStorage.js","components/Timer.js","components/ModalWindow.js","components/DeleteTaskButton.js","components/TasksTable.js","components/GenerateTenTasksButton.js","helpers/randomColor.js","components/Chart.js","components/HomePage.js","components/ErrorModalWindow.js","components/TaskInfo.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","margin","display","floatingLabelFocusStyle","color","fontSize","paddingLeft","input","paddingBottom","Input","handleChange","textTask","classes","TextField","label","id","className","InputLabelProps","InputProps","onChange","value","RunButton","clickFunction","isTimerRunning","Button","variant","onClick","tasksReducer","state","action","type","task","taskName","startTime","endTime","taskDuration","taskColor","filter","inputValueReducer","runTaskReducer","timerDurationReducer","startTimeReducer","getIsTimerRunning","getTasks","tasks","getIsEmptyInput","isEmptyInput","getTimerValueWhenStop","timerValueWhenStop","getTimerTimeDuration","timerDuration","getStartTime","rootReducer","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","connect","startTimeFromRedux","dispatch","saveTimerTime","saveTimerDuration","useState","timerTime","setTimerTime","useEffect","timerID","setInterval","moment","format","diff","utc","tick","clearInterval","ModalWindow","open","setOpen","handleClose","Dialog","onClose","DialogTitle","style","DialogContent","DialogContentText","DialogActions","deleteTask","React","startIcon","aria-labelledby","aria-describedby","autoFocus","StyledTableContainer","withStyles","minWidth","TableContainer","StyledTableCell","head","backgroundColor","palette","common","white","grey","body","TableCell","StyledTableRow","TableRow","component","Paper","Table","aria-label","TableHead","align","TableBody","map","i","key","scope","to","GenerateTenTasksButton","randomColor","r","g","b","Math","floor","random","toString","deleteAllTasksFromLog","data","isClickedGenerateButton","setClickedGenerateButton","generatedTasks","setGeneratedTasks","randomTaskDuration","min","max","randomMS","breakBetweenGenerated10Tasks","totalTime","durations","totalDurations","slice","reduce","prev","cur","duration","add","asMilliseconds","push","generateTenTasks","prevTaskId","prevTaskColor","needTasks","hour","split","el","timeDurationFromPrevTask","minutesInThisHour","arrayOfMinutesInThisHour","minutesInThisHourFromPrevTask","timeDurationFromPrevTaskMoment","oneHourMoment","length","startTimeMoment","nextHour","nextHourString","nextHourMoment","durationsTasksInThisHour","lastTaskInThisHour","startHourInLastTaskInThisHour","timeDurationFromPrevHourMoment","addTaskDurationToData","objOfTasksDuration","arr","prevTasks","j","minutes","findTaskColor","taskId","replace","needTask","obj","aspect","height","top","left","stroke","dataKey","_","series","Object","keys","barSize","stackId","fill","dataSeries","stopTimerValue","timerDurationTime","runTask","addTask","handleIsInputEmpty","handleStartTime","currentTask","setCurrentTask","trim","e","persist","prevState","target","Date","exact","activeClassName","path","TasksTable","Chart","ErrorPath","textError","boxShadow","textAlign","table","history","selectedId","location","pathname","selectedTask","find","ErrorModalWindow","App","HomePage","TaskInfo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8704bb0d.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: 300,\n    margin: \"0 auto\",\n    display: \"flex\"\n  },\n  floatingLabelFocusStyle: {\n    color: \"blue\",\n    fontSize: 20,\n    paddingLeft: 65\n  },\n  input: {\n    paddingBottom: 10,\n    color: \"blue\"\n  }\n}));\n\nconst Input = ({ handleChange, textTask }) => {\n  const classes = useStyles();\n\n  return (\n    <TextField\n      label=\"Name of your task\"\n      id=\"inputTask\"\n      className={classes.root}\n      InputLabelProps={{\n        className: classes.floatingLabelFocusStyle\n      }}\n      InputProps={{ className: classes.input }}\n      onChange={handleChange}\n      value={textTask}\n    />\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    margin: \"0 auto\"\n  }\n}));\n\nconst RunButton = ({ clickFunction, isTimerRunning }) => {\n  const classes = useStyles();\n\n  return (\n    <Button\n      className={classes.root}\n      variant=\"contained\"\n      onClick={clickFunction}\n    >\n      {isTimerRunning ? \"stop\" : \"start\"}\n    </Button>\n  );\n};\n\nexport default RunButton;\n","import { ADD_TASK, DELETE_TASK, DELETE_ALL_TASKS } from \"../actions\";\n\nconst tasksReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD_TASK:\n      return [\n        ...state,\n        {\n          id: action.task.id,\n          taskName: action.task.taskName,\n          startTime: action.task.startTime,\n          endTime: action.task.endTime,\n          taskDuration: action.task.taskDuration,\n          taskColor: action.task.taskColor\n        }\n      ];\n\n    case DELETE_TASK:\n      return state.filter(task => task.id !== action.id);\n\n    case DELETE_ALL_TASKS:\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nexport default tasksReducer;\n","// action types\nexport const START_TIMER = \"START_TIMER\";\nexport const START_TIME = \"START_TIME\";\nexport const ADD_TASK = \"ADD_TASK\";\nexport const DELETE_TASK = \"DELETE_TASK\";\nexport const IS_EMPTY_INPUT = \"IS_EMPTY_INPUT\";\nexport const HANDLE_TIMER_DURATION = \"HANDLE_TIMER_DURATION\";\nexport const DELETE_ALL_TASKS = \"DELETE_ALL_TASKS\";\n\n// action creators\nexport const startTimer = () => ({ type: START_TIMER });\nexport const handleStartTime = value => ({ type: START_TIME, value });\nexport const addTask = task => ({ type: ADD_TASK, task });\nexport const deleteTask = id => ({ type: DELETE_TASK, id });\nexport const handleIsInputEmpty = value => ({ type: IS_EMPTY_INPUT, value });\nexport const saveTimerDuration = value => ({\n  type: HANDLE_TIMER_DURATION,\n  value\n});\nexport const deleteAllTasks = () => ({ type: DELETE_ALL_TASKS });\n","import { IS_EMPTY_INPUT } from \"../actions\";\n\nconst inputValueReducer = (state = true, action) => {\n  switch (action.type) {\n    case IS_EMPTY_INPUT:\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nexport default inputValueReducer;","import { START_TIMER } from \"../actions\";\n\nconst runTaskReducer = (state = false, action) => {\n  switch (action.type) {\n    case START_TIMER:\n      return !state;\n\n    default:\n      return state;\n  }\n};\n\nexport default runTaskReducer;\n","import { HANDLE_TIMER_DURATION } from \"../actions\";\n\nconst timerDurationReducer = (state = \"\", action) => {\n  switch (action.type) {\n    case HANDLE_TIMER_DURATION:\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nexport default timerDurationReducer;\n","import { START_TIME } from \"../actions\";\n\nconst startTimeReducer = (state = '00:00:00', action) => {\n  switch (action.type) {\n    case START_TIME:\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nexport default startTimeReducer;\n","import { createStore, combineReducers } from \"redux\";\nimport { loadState, saveState } from \"../localStorage\";\n\nimport tasksReducer from \"./reducers/tasksReducer\";\nimport inputValueReducer from \"./reducers/inputValueReducer\";\nimport runTaskReducer from \"./reducers/runTaskReducer\";\nimport timerDurationReducer from \"./reducers/timerDurationReducer\";\nimport startTimeReducer from \"./reducers/startTimeReducer\";\n\n// selectors\nexport const getIsTimerRunning = state => state.isTimerRunning;\nexport const getTasks = state => state.tasks;\nexport const getIsEmptyInput = state => state.isEmptyInput;\nexport const getTimerValueWhenStop = state => state.timerValueWhenStop;\nexport const getTimerTimeDuration = state => state.timerDuration;\nexport const getStartTime = state => state.startTime;\n\n\nconst rootReducer = combineReducers({\n  startTime: startTimeReducer,\n  isTimerRunning: runTaskReducer,\n  isEmptyInput: inputValueReducer,\n  tasks: tasksReducer,\n  timerDuration: timerDurationReducer\n});\n\nconst persistedState = loadState();\nconst store = createStore(\n  rootReducer,\n  persistedState,\n);\n\n\nstore.subscribe(() => {\n  saveState({\n    startTime: store.getState().startTime,\n    isTimerRunning: store.getState().isTimerRunning,\n    isEmptyInput: store.getState().isEmptyInput,\n    tasks: store.getState().tasks\n  });\n});\n\nexport default store;\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch {\n    // ignore write errors\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\n\nimport {\n  getIsTimerRunning,\n  getTimerTimeDuration,\n  getStartTime\n} from \"../redux/store\";\nimport { saveTimerDuration } from \"../redux/actions\";\n\nconst Timer = ({\n  isTimerRunning,\n  saveTimerTime,\n  timerDuration,\n  startTimeFromRedux\n}) => {\n  const [timerTime, setTimerTime] = useState(timerDuration);\n\n  const tick = startTimeFromRedux => {\n    let endTime = moment().format(\"HH:mm:ss\");\n\n    let diff = moment\n      .utc(\n        moment(endTime, \"HH:mm:ss\").diff(moment(startTimeFromRedux, \"HH:mm:ss\"))\n      )\n      .format(\"HH:mm:ss\");\n\n    setTimerTime(diff);\n  };\n\n  useEffect(() => {\n    if (isTimerRunning) {\n      saveTimerTime(timerTime);\n      var timerID = setInterval(() => tick(startTimeFromRedux), 1000);\n    } else {\n      setTimerTime(\"00:00:00\");\n    }\n\n    if (timerTime === \"23:59:59\") {\n      clearInterval(timerID);\n    }\n\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  }, [timerTime, isTimerRunning, saveTimerTime, startTimeFromRedux]);\n\n  return <div className=\"timerWrapper\">{timerTime}</div>;\n};\n\nconst mapStateToProps = state => ({\n  isTimerRunning: getIsTimerRunning(state),\n  timerDuration: getTimerTimeDuration(state),\n  startTimeFromRedux: getStartTime(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  saveTimerTime: value => dispatch(saveTimerDuration(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\n\nfunction ModalWindow() {\n  const [open, setOpen] = useState(true);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle id=\"max-width-dialog-title\">\n          <span style={{ color: \"red\" }}>Empty task name</span>\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            You are trying close your task without name, enter the title and try\n            again!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nexport default ModalWindow;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { connect } from \"react-redux\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport { deleteTask } from \"../redux/actions\";\n\nfunction DeleteTaskButton({ deleteTask, id }) {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  \n  return (\n    <div>\n      <Button \n        variant=\"contained\" \n        color=\"secondary\" \n        onClick={handleClickOpen}\n        startIcon={<DeleteIcon />}\n      >\n        Delete\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Are you sure?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            After deleting your task will not be saved\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Disagree\n          </Button>\n          <Button \n            onClick={\n              () => {\n                handleClose();\n                deleteTask(id);\n              }\n            }  \n            color=\"primary\"  \n            autoFocus\n          >\n            Agree\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  deleteTask: id => dispatch(deleteTask(id))\n});\n\nexport default connect(null, mapDispatchToProps)(DeleteTaskButton);","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport DeleteTaskButton from \"./DeleteTaskButton\";\nimport { getTasks } from \"../redux/store\";\n\nconst StyledTableContainer = withStyles(theme => ({\n  root: {\n    minWidth: 700,\n    width: \"90%\",\n    margin: \"0 auto\"\n  }\n}))(TableContainer);\n\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.white,\n    color: theme.palette.common.grey\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    backgroundColor: \"aliceblue\"\n  }\n}))(TableRow);\n\nconst TasksTable = ({ tasks }) => {\n  return (\n    <StyledTableContainer component={Paper}>\n      <Table aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>№</StyledTableCell>\n            <StyledTableCell align=\"right\">Task</StyledTableCell>\n            <StyledTableCell align=\"right\">Time&nbsp;start</StyledTableCell>\n            <StyledTableCell align=\"right\">Time&nbsp;end</StyledTableCell>\n            <StyledTableCell align=\"right\">Time&nbsp;spend</StyledTableCell>\n            <StyledTableCell align=\"right\">Info</StyledTableCell>\n            <StyledTableCell align=\"right\">Delete</StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {tasks.map((task, i) => {\n            const { id, taskName, startTime, endTime, taskDuration } = task;\n\n            return (\n              <StyledTableRow key={id}>\n                <StyledTableCell component=\"th\" scope=\"row\">\n                  {i + 1}\n                </StyledTableCell>\n                <StyledTableCell align=\"right\">{taskName}</StyledTableCell>\n                <StyledTableCell align=\"right\">{startTime}</StyledTableCell>\n                <StyledTableCell align=\"right\">{endTime}</StyledTableCell>\n                <StyledTableCell align=\"right\">{taskDuration}</StyledTableCell>\n                <StyledTableCell align=\"right\">\n                  <Link\n                    to={`/tasks/:${id}?`}\n                    className=\"MuiButton-contained MuiButton-root MuiButtonBase-root\"\n                  >\n                    Info\n                  </Link>\n                </StyledTableCell>\n                <StyledTableCell align=\"right\">\n                  <DeleteTaskButton id={id} />\n                </StyledTableCell>\n              </StyledTableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </StyledTableContainer>\n  );\n};\n\nconst mapStateToProps = state => ({\n  tasks: getTasks(state)\n});\n\nexport default connect(mapStateToProps, null)(TasksTable);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    margin: \"20px auto 0\",\n  }\n}));\n\nconst GenerateTenTasksButton = (\n  { clickFunction }\n) => {\n  const classes = useStyles();\n\n  return (\n    <Button\n      className={classes.root}\n      variant=\"contained\"\n      onClick={clickFunction}\n    >\n      {\"Generate 10 tasks\"}\n    </Button>\n  );\n};\n\nexport default GenerateTenTasksButton;\n\n","export default function randomColor() {\n  let r,\n    g,\n    b,\n    color = null;\n  r = Math.floor(Math.random() * 256);\n  g = Math.floor(Math.random() * 256);\n  b = Math.floor(Math.random() * 256);\n  color = \"#\" + r.toString(16) + g.toString(16) + b.toString(16);\n\n  return color;\n}\n","import React, { useState } from \"react\";\nimport {\n  ComposedChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Legend\n} from \"recharts\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport { getTasks } from \"../redux/store\";\nimport GenerateTenTasksButton from \"./GenerateTenTasksButton\";\nimport randomColor from \"../helpers/randomColor\";\nimport { deleteAllTasks }from \"../redux/actions\";\n\nconst Chart = ({ tasks, deleteAllTasksFromLog }) => {\n  const data = [];\n  const [isClickedGenerateButton, setClickedGenerateButton] = useState(null);\n  const [generatedTasks, setGeneratedTasks] = useState([]);\n\n  const randomTaskDuration = () => {\n    const randomMinutes = (min, max) => {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    };\n    const random = randomMinutes(10, 90);\n    const randomMS = random * 60 * 1000;\n\n    return moment.utc(randomMS).format(\"HH:mm:ss\");\n  };\n\n  const breakBetweenGenerated10Tasks = () => {\n    const randomMinutes = (min, max) => {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    };\n\n    return moment.utc(randomMinutes(1, 15) * 60 * 1000).format(\"HH:mm:ss\");\n  };\n\n  const totalTime = (startTime, taskDuration) => {\n    const durations = [startTime, taskDuration];\n\n    const totalDurations = durations\n      .slice(1)\n      .reduce(\n        (prev, cur) => moment.duration(cur).add(prev),\n        moment.duration(durations[0])\n      );\n\n    return moment.utc(totalDurations.asMilliseconds()).format(\"HH:mm:ss\");\n  };\n\n  const generateTenTasks = () => {\n    let generatedTasks = [];\n\n    for (let i = 0; i < 10; i++) {\n      let startTime;\n\n      if (i === 0) {\n        startTime = \"06:00:00\";\n      } else {\n        startTime = totalTime(\n          generatedTasks[i - 1].endTime,\n          breakBetweenGenerated10Tasks()\n        );\n      }\n\n      let taskDuration = randomTaskDuration();\n      let endTime = totalTime(startTime, taskDuration);\n\n      generatedTasks.push({\n        startTime: startTime,\n        taskDuration: taskDuration,\n        endTime: endTime,\n        id: i + 1,\n        taskColor: randomColor()\n      });\n    }\n    setClickedGenerateButton(false);\n\n    return generatedTasks;\n  };\n\n  if (isClickedGenerateButton) {\n    setGeneratedTasks(generateTenTasks());\n  }\n\n  const needTasks = hour => {\n    if (isClickedGenerateButton !== null) {\n      return [...generatedTasks].filter(\n        ({ startTime }) => startTime.split(\":\").map(el => +el)[0] === hour\n      );\n    } else {\n      return tasks.filter(\n        ({ startTime }) => startTime.split(\":\").map(el => +el)[0] === hour\n      );\n    }\n  };\n\n  const durationsTasksInThisHour = tasks => {\n    const durations = [];\n\n    for (let i = 0; i < tasks.length; i++) {\n      const task = tasks[i];\n      const hourStart = task.startTime.split(\":\")[0];\n      const hourEnd = task.endTime.split(\":\")[0];\n\n      if (hourStart === hourEnd) {\n        durations.push(task.taskDuration);\n      } else {\n        const startTimeMoment = moment(task.startTime, \"HH:mm:ss\");\n        const nextHour = +task.startTime.split(\":\")[0] + 1;\n        let nextHourString = \"\";\n\n        if (nextHour > 9) {\n          nextHourString = `${nextHour}:00:00`;\n        } else {\n          nextHourString = `0${nextHour}:00:00`;\n        }\n\n        let nextHourMoment = moment(nextHourString, \"HH:mm:ss\");\n\n        durations.push(\n          moment.utc(nextHourMoment.diff(startTimeMoment)).format(\"HH:mm:ss\")\n        );\n      }\n    }\n\n    return durations;\n  };\n\n  let timeDurationFromPrevTask = null;\n\n  const minutesInThisHour = hour => {\n    let arrayOfMinutesInThisHour = [];\n    let tasks = needTasks(hour);\n    let minutesInThisHourFromPrevTask = null;\n\n    if (timeDurationFromPrevTask !== null) {\n      let duration = +timeDurationFromPrevTask.slice(0, 2);\n\n      if (duration >= 1) {\n        minutesInThisHourFromPrevTask = \"00:60:00\";\n        let timeDurationFromPrevTaskMoment = moment(\n          timeDurationFromPrevTask,\n          \"HH:mm:ss\"\n        );\n        let oneHourMoment = moment(\"01:00:00\", \"HH:mm:ss\");\n\n        timeDurationFromPrevTask = moment\n          .utc(timeDurationFromPrevTaskMoment.diff(oneHourMoment))\n          .format(\"HH:mm:ss\");\n      } else {\n        minutesInThisHourFromPrevTask = timeDurationFromPrevTask;\n        timeDurationFromPrevTask = null;\n      }\n    }\n\n    let durations = [\n      minutesInThisHourFromPrevTask,\n      ...durationsTasksInThisHour(tasks)\n    ];\n\n    for (let i = 0; i < durations.length; i++) {\n      const duration = durations[i];\n\n      if (durations[i] === null) {\n        continue;\n      }\n      arrayOfMinutesInThisHour.push(+duration.split(\":\")[1]);\n      minutesInThisHourFromPrevTask = null;\n    }\n\n    if (tasks.length > 0) {\n      const lastTaskInThisHour = tasks[tasks.length - 1];\n      const startHourInLastTaskInThisHour = +lastTaskInThisHour.startTime.split(\n        \":\"\n      )[0];\n      const endHourInLastTaskInThisHour = +lastTaskInThisHour.endTime.split(\n        \":\"\n      )[0];\n\n      if (endHourInLastTaskInThisHour - startHourInLastTaskInThisHour > 0) {\n        const timeDurationFromPrevTaskMoment = moment(\n          lastTaskInThisHour.taskDuration,\n          \"HH:mm:ss\"\n        );\n        const timeDurationFromPrevHourMoment = moment(\n          durations[durations.length - 1],\n          \"HH:mm:ss\"\n        );\n\n        timeDurationFromPrevTask = moment\n          .utc(\n            timeDurationFromPrevTaskMoment.diff(timeDurationFromPrevHourMoment)\n          )\n          .format(\"HH:mm:ss\");\n      }\n    }\n\n    return arrayOfMinutesInThisHour;\n  };\n\n  let prevTaskId;\n\n  const addTaskDurationToData = hour => {\n    const objOfTasksDuration = {};\n    const arr = minutesInThisHour(hour);\n    const prevTasks = needTasks(hour - 1);\n    const tasks = needTasks(hour);\n\n    if (prevTasks.length > 0) {\n      prevTaskId = prevTasks[prevTasks.length - 1].id;\n    }\n\n    if (arr.length > 0) {\n      for (let j = 0; j < arr.length; j++) {\n        let task = tasks[j];\n        let taskName = null;\n\n        if (arr.length === tasks.length) {\n          taskName = `Task-${task.id} in hour-${hour}`;\n          objOfTasksDuration[taskName] = arr[j];\n        }\n\n        if (arr.length !== 0 && tasks.length === 0) {\n          taskName = `Task-${prevTaskId} in hour-${hour}`;\n          objOfTasksDuration[taskName] = arr[j];\n        }\n\n        if (arr.length > tasks.length) {\n          if (j === 0) {\n            taskName = `Task-${prevTaskId} in hour-${hour}`;\n            objOfTasksDuration[taskName] = arr[j];\n          }\n\n          if (j > 0) {\n            taskName = `Task-${tasks[j - 1].id} in hour-${hour}`;\n            objOfTasksDuration[taskName] = arr[j];\n          }\n        }\n      }\n    }\n\n    return objOfTasksDuration;\n  };\n\n  for (let i = 0; i < 24; i++) {\n    if (i <= 4) {\n      data.push({\n        minutes: i * 15,\n        hour: i,\n        ...addTaskDurationToData(i)\n      });\n    } else {\n      data.push({\n        hour: i,\n        ...addTaskDurationToData(i)\n      });\n    }\n  }\n\n  let prevTaskColor;\n\n  const findTaskColor = (taskName, hour) => {\n    let taskId = +taskName.split(\" \")[0].replace(/Task-/gi, \"\");\n    let needTask = needTasks(hour).filter(el => el.id === taskId);\n    let [obj] = needTask;\n\n    if (obj) {\n      prevTaskColor = obj.taskColor;\n      return obj.taskColor;\n    } else {\n      return prevTaskColor;\n    }\n  };\n\n  const dataSeries = (data, hour) => {\n    let series = [];\n    let dataKeys = Object.keys(data[hour]);\n\n    for (const key of dataKeys) {\n      if (key !== \"hour\" && key !== \"minutes\") {\n        series.push(\n          <Bar\n            dataKey={key}\n            barSize={20}\n            stackId=\"a\"\n            fill={findTaskColor(key, hour)}\n            key={key}\n          />\n        );\n      }\n    }\n\n    return series;\n  };\n\n  return (\n    <>\n      <GenerateTenTasksButton\n        clickFunction={\n          () => {\n            setClickedGenerateButton(true);\n            deleteAllTasksFromLog();\n          }\n        }\n      />\n      <ResponsiveContainer width=\"90%\" aspect={6.0 / 2.0} height={300}>\n        <ComposedChart\n          data={data}\n          margin={{\n            top: 20,\n            left: 20\n          }}\n        >\n          <CartesianGrid stroke=\"#f5f5f5\" />\n          <XAxis dataKey=\"hour\" />\n          <YAxis dataKey=\"minutes\" />\n          <Tooltip />\n          <Legend />\n          {data.map((_, i) => dataSeries(data, i))}\n        </ComposedChart>\n      </ResponsiveContainer>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  tasks: getTasks(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteAllTasksFromLog: () => dispatch(deleteAllTasks())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { Route, Switch } from \"react-router-dom\";\nimport moment from \"moment\";\n\nimport Input from \"./Input\";\nimport RunButton from \"./RunButton\";\nimport Timer from \"./Timer\";\nimport ModalWindow from \"./ModalWindow\";\nimport TasksTable from \"./TasksTable\";\nimport Chart from \"./Chart\";\n\nimport randomColor from \"../helpers/randomColor\";\n\nimport {\n  getIsTimerRunning,\n  getTimerValueWhenStop,\n  getIsEmptyInput,\n  getTimerTimeDuration,\n  getStartTime\n} from \"../redux/store\";\n\nimport { \n  addTask, \n  startTimer, \n  handleIsInputEmpty, \n  handleStartTime,\n} from \"../redux/actions\";\n\nconst HomePage = ({ \n  isTimerRunning,\n  runTask,\n  isEmptyInput,\n  addTask,\n  handleIsInputEmpty,\n  timerDurationTime,\n  startTimeFromRedux,\n  handleStartTime\n}) => {\n  const [currentTask, setCurrentTask] = useState({\n    id: null,\n    taskName: \"\",\n    startTime: null,\n    endTime: null,\n    taskDuration: null,\n    taskColor: null\n  });\n\n  const { taskName, endTime } = currentTask;\n\n  const handleInputChange = e => {\n    e.persist();\n\n    setCurrentTask(prevState => {\n      return {\n        ...prevState,\n        taskName: e.target.value\n      };\n    });\n  };\n\n  useEffect(() => {\n    if (taskName.trim() === \"\") {\n      handleIsInputEmpty(true);\n    } else {\n      handleIsInputEmpty(false);\n    }\n\n    if (endTime) {\n      addTask(currentTask);\n      setCurrentTask({\n        id: null,\n        taskName: \"\",\n        startTime: null,\n        endTime: null,\n        taskDuration: null,\n        taskColor: null\n      });\n      handleStartTime(null);\n    }\n  }, [endTime, taskName, currentTask, handleIsInputEmpty, addTask, handleStartTime]);\n\n\n  return (\n    <>\n    <Input \n      handleChange={handleInputChange} \n      textTask={taskName} \n    />\n    <Timer \n      isTimerRunning={isTimerRunning} \n      currentTask={currentTask} \n    />\n    <RunButton\n      clickFunction={() => {\n        runTask();\n\n        if (!isTimerRunning) {\n          handleStartTime(moment().format(\"HH:mm:ss\"));\n        }\n\n        if (!taskName.trim()) {\n          return;\n        }        \n\n        if (isTimerRunning) {\n          \n          setCurrentTask(prevState => ({\n            ...prevState,\n            id: +new Date(),\n            startTime: startTimeFromRedux,\n            endTime: moment().format(\"HH:mm:ss\"),\n            taskDuration: timerDurationTime,\n            taskColor: randomColor()\n          }));\n        }\n      }}\n      isTimerRunning={isTimerRunning}\n    />\n    {isTimerRunning && isEmptyInput ? <ModalWindow /> : null}\n    <div className=\"nav\">\n      <NavLink\n        to=\"/home/task-log\"\n        exact\n        className=\"nav__item\"\n        activeClassName=\"nav__item--active\"\n      >\n        TASKS LOG\n      </NavLink>\n      <NavLink\n        to=\"/home/task-chart\"\n        className=\"nav__item\"\n        activeClassName=\"nav__item--active\"\n      >\n        TASKS CHART\n      </NavLink>\n    </div>\n    <Switch>\n      <Route path=\"/home/task-log\" exact component={TasksTable} />\n      <Route path=\"/home/task-chart\" exact component={Chart} />\n    </Switch>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isTimerRunning: getIsTimerRunning(state),\n  stopTimerValue: getTimerValueWhenStop(state),\n  isEmptyInput: getIsEmptyInput(state),\n  timerDurationTime: getTimerTimeDuration(state),\n  startTimeFromRedux: getStartTime(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  runTask: () => dispatch(startTimer()),\n  addTask: task => dispatch(addTask(task)),\n  handleIsInputEmpty: value => dispatch(handleIsInputEmpty(value)),\n  handleStartTime: value => dispatch(handleStartTime(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);","import React from \"react\";\n\nconst ErrorPath = ({ textError }) => (\n  <div className=\"errorPath\">\n    <p>{textError || \"you entered the wrong path\"}</p>\n  </div>\n);\nexport default ErrorPath;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport { getTasks } from \"../redux/store\";\nimport ErrorModalWindow from \"./ErrorModalWindow\";\n\nconst StyledTableContainer = withStyles(theme => ({\n  root: {\n    minWidth: 700,\n    width: \"90%\",\n    margin: \"50px auto\",\n    boxShadow: \"0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)\"\n  }\n}))(TableContainer);\n\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    backgroundColor: \"aliceblue\"\n  }\n}))(TableRow);\n\nconst StyledTableCell = withStyles(theme => ({\n  root: {\n    textAlign: \"center\"\n  }\n}))(TableCell);\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  }\n});\n\nconst TaskInfo = ({ history, tasks }) => {\n  const classes = useStyles();\n  let selectedId = +history.location.pathname.split(\":\")[1];\n  let selectedTask = tasks.find(task => task.id === selectedId);\n\n  if (typeof selectedTask !== \"object\") {\n    return <ErrorModalWindow textError=\"task doesn't exist\" />;\n  }\n\n  const { taskName, startTime, endTime, taskDuration } = selectedTask;\n\n  return (\n    <>\n      <div className=\"linkBackWrapper\">\n        <Link\n          to=\"/home/task-log\"\n          className=\"MuiButton-contained MuiButton-root MuiButtonBase-root\"\n        >\n          Back\n        </Link>\n      </div>\n      <StyledTableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <StyledTableRow>\n              <StyledTableCell>task text</StyledTableCell>\n              <StyledTableCell align=\"right\">\n                timer value when start\n              </StyledTableCell>\n              <StyledTableCell align=\"right\">\n                timer value when stop\n              </StyledTableCell>\n              <StyledTableCell align=\"right\">timer duration</StyledTableCell>\n            </StyledTableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow>\n              <StyledTableCell component=\"th\" scope=\"row\">\n                {taskName}\n              </StyledTableCell>\n              <StyledTableCell align=\"right\">{startTime}</StyledTableCell>\n              <StyledTableCell align=\"right\">{endTime}</StyledTableCell>\n              <StyledTableCell align=\"right\">{taskDuration}</StyledTableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </StyledTableContainer>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  tasks: getTasks(state)\n});\n\nexport default connect(mapStateToProps, null)(TaskInfo);\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport HomePage from \"./components/HomePage\";\nimport ErrorModalWindow from \"./components/ErrorModalWindow\";\nimport TaskInfo from \"./components/TaskInfo\";\n\nconst App = () => (\n  <Switch>\n    <Route path=\"/home\" component={HomePage} />\n    <Route path=\"/tasks/:taskId?\" exact component={TaskInfo} />\n    <Route component={ErrorModalWindow} />\n  </Switch>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
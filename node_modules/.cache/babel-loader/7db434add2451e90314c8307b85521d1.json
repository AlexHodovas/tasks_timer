{"ast":null,"code":"var _jsxFileName = \"/Users/alex/projects/tasks_timer/src/components/HomePage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { Route, Switch } from \"react-router-dom\";\nimport moment from \"moment\";\nimport Input from \"./Input\";\nimport RunButton from \"./RunButton\";\nimport Timer from \"./Timer\";\nimport ModalWindow from \"./ModalWindow\";\nimport TasksTable from \"./TasksTable\";\nimport Chart from \"./Chart\";\nimport randomColor from \"../helpers/randomColor\";\nimport { getIsTimerRunning, getTimerValueWhenStop, getIsEmptyInput, getTimerTimeDuration, getStartTime } from \"../redux/store\";\nimport { addTask, startTimer, handleIsInputEmpty, handleStartTime } from \"../redux/actions\";\n\nconst HomePage = ({\n  isTimerRunning,\n  runTask,\n  isEmptyInput,\n  addTask,\n  handleIsInputEmpty,\n  timerDurationTime,\n  startTimeFromRedux,\n  handleStartTime\n}) => {\n  const [currentTask, setCurrentTask] = useState({\n    id: null,\n    taskName: \"\",\n    startTime: null,\n    endTime: null,\n    taskDuration: null,\n    taskColor: null\n  });\n  const {\n    taskName,\n    endTime\n  } = currentTask;\n\n  const handleInputChange = e => {\n    e.persist();\n    setCurrentTask(prevState => {\n      return { ...prevState,\n        taskName: e.target.value\n      };\n    });\n  };\n\n  useEffect(() => {\n    if (taskName.trim() === \"\") {\n      handleIsInputEmpty(true);\n    } else {\n      handleIsInputEmpty(false);\n    }\n\n    if (endTime) {\n      addTask(currentTask);\n      setCurrentTask({\n        id: null,\n        taskName: \"\",\n        startTime: null,\n        endTime: null,\n        taskDuration: null,\n        taskColor: null\n      });\n      handleStartTime(null);\n    }\n  }, [endTime, taskName, currentTask, handleIsInputEmpty, addTask, handleStartTime]);\n  return React.createElement(React.Fragment, null, React.createElement(Input, {\n    handleChange: handleInputChange,\n    textTask: taskName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(Timer, {\n    isTimerRunning: isTimerRunning,\n    currentTask: currentTask,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(RunButton, {\n    clickFunction: () => {\n      runTask();\n\n      if (!isTimerRunning) {\n        handleStartTime(moment().format(\"HH:mm:ss\"));\n      }\n\n      if (!taskName.trim()) {\n        return;\n      }\n\n      if (isTimerRunning) {\n        setCurrentTask(prevState => ({ ...prevState,\n          id: +new Date(),\n          startTime: startTimeFromRedux,\n          endTime: moment().format(\"HH:mm:ss\"),\n          taskDuration: timerDurationTime,\n          taskColor: randomColor()\n        }));\n      }\n    },\n    isTimerRunning: isTimerRunning,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), isTimerRunning && isEmptyInput ? React.createElement(ModalWindow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }) : null, React.createElement(\"div\", {\n    className: \"nav\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    to: \"/home/task-log\",\n    exact: true,\n    className: \"nav__item\",\n    activeClassName: \"nav__item--active\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"TASKS LOG\"), React.createElement(NavLink, {\n    to: \"/home/task-chart\",\n    className: \"nav__item\",\n    activeClassName: \"nav__item--active\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"TASKS CHART\")), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: \"/home/task-log\",\n    exact: true,\n    component: TasksTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/home/task-chart\",\n    exact: true,\n    component: Chart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  })));\n};\n\nconst mapStateToProps = state => ({\n  isTimerRunning: getIsTimerRunning(state),\n  stopTimerValue: getTimerValueWhenStop(state),\n  isEmptyInput: getIsEmptyInput(state),\n  timerDurationTime: getTimerTimeDuration(state),\n  startTimeFromRedux: getStartTime(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  runTask: () => dispatch(startTimer()),\n  addTask: task => dispatch(addTask(task)),\n  handleIsInputEmpty: value => dispatch(handleIsInputEmpty(value)),\n  handleStartTime: value => dispatch(handleStartTime(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);","map":{"version":3,"sources":["/Users/alex/projects/tasks_timer/src/components/HomePage.js"],"names":["React","useEffect","useState","connect","NavLink","Route","Switch","moment","Input","RunButton","Timer","ModalWindow","TasksTable","Chart","randomColor","getIsTimerRunning","getTimerValueWhenStop","getIsEmptyInput","getTimerTimeDuration","getStartTime","addTask","startTimer","handleIsInputEmpty","handleStartTime","HomePage","isTimerRunning","runTask","isEmptyInput","timerDurationTime","startTimeFromRedux","currentTask","setCurrentTask","id","taskName","startTime","endTime","taskDuration","taskColor","handleInputChange","e","persist","prevState","target","value","trim","format","Date","mapStateToProps","state","stopTimerValue","mapDispatchToProps","dispatch","task"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { Route, Switch } from \"react-router-dom\";\nimport moment from \"moment\";\n\nimport Input from \"./Input\";\nimport RunButton from \"./RunButton\";\nimport Timer from \"./Timer\";\nimport ModalWindow from \"./ModalWindow\";\nimport TasksTable from \"./TasksTable\";\nimport Chart from \"./Chart\";\n\nimport randomColor from \"../helpers/randomColor\";\n\nimport {\n  getIsTimerRunning,\n  getTimerValueWhenStop,\n  getIsEmptyInput,\n  getTimerTimeDuration,\n  getStartTime\n} from \"../redux/store\";\n\nimport { \n  addTask, \n  startTimer, \n  handleIsInputEmpty, \n  handleStartTime,\n} from \"../redux/actions\";\n\nconst HomePage = ({ \n  isTimerRunning,\n  runTask,\n  isEmptyInput,\n  addTask,\n  handleIsInputEmpty,\n  timerDurationTime,\n  startTimeFromRedux,\n  handleStartTime\n}) => {\n  const [currentTask, setCurrentTask] = useState({\n    id: null,\n    taskName: \"\",\n    startTime: null,\n    endTime: null,\n    taskDuration: null,\n    taskColor: null\n  });\n\n  const { taskName, endTime } = currentTask;\n\n  const handleInputChange = e => {\n    e.persist();\n\n    setCurrentTask(prevState => {\n      return {\n        ...prevState,\n        taskName: e.target.value\n      };\n    });\n  };\n\n  useEffect(() => {\n    if (taskName.trim() === \"\") {\n      handleIsInputEmpty(true);\n    } else {\n      handleIsInputEmpty(false);\n    }\n\n    if (endTime) {\n      addTask(currentTask);\n      setCurrentTask({\n        id: null,\n        taskName: \"\",\n        startTime: null,\n        endTime: null,\n        taskDuration: null,\n        taskColor: null\n      });\n      handleStartTime(null);\n    }\n  }, [endTime, taskName, currentTask, handleIsInputEmpty, addTask, handleStartTime]);\n\n\n  return (\n    <>\n    <Input \n      handleChange={handleInputChange} \n      textTask={taskName} \n    />\n    <Timer \n      isTimerRunning={isTimerRunning} \n      currentTask={currentTask} \n    />\n    <RunButton\n      clickFunction={() => {\n        runTask();\n\n        if (!isTimerRunning) {\n          handleStartTime(moment().format(\"HH:mm:ss\"));\n        }\n\n        if (!taskName.trim()) {\n          return;\n        }        \n\n        if (isTimerRunning) {\n          \n          setCurrentTask(prevState => ({\n            ...prevState,\n            id: +new Date(),\n            startTime: startTimeFromRedux,\n            endTime: moment().format(\"HH:mm:ss\"),\n            taskDuration: timerDurationTime,\n            taskColor: randomColor()\n          }));\n        }\n      }}\n      isTimerRunning={isTimerRunning}\n    />\n    {isTimerRunning && isEmptyInput ? <ModalWindow /> : null}\n    <div className=\"nav\">\n      <NavLink\n        to=\"/home/task-log\"\n        exact\n        className=\"nav__item\"\n        activeClassName=\"nav__item--active\"\n      >\n        TASKS LOG\n      </NavLink>\n      <NavLink\n        to=\"/home/task-chart\"\n        className=\"nav__item\"\n        activeClassName=\"nav__item--active\"\n      >\n        TASKS CHART\n      </NavLink>\n    </div>\n    <Switch>\n      <Route path=\"/home/task-log\" exact component={TasksTable} />\n      <Route path=\"/home/task-chart\" exact component={Chart} />\n    </Switch>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isTimerRunning: getIsTimerRunning(state),\n  stopTimerValue: getTimerValueWhenStop(state),\n  isEmptyInput: getIsEmptyInput(state),\n  timerDurationTime: getTimerTimeDuration(state),\n  startTimeFromRedux: getStartTime(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  runTask: () => dispatch(startTimer()),\n  addTask: task => dispatch(addTask(task)),\n  handleIsInputEmpty: value => dispatch(handleIsInputEmpty(value)),\n  handleStartTime: value => dispatch(handleStartTime(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);"]},"metadata":{},"sourceType":"module"}
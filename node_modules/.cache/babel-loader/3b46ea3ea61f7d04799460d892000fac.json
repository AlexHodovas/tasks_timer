{"ast":null,"code":"var _jsxFileName = \"/Users/alex/projects/tasks_timer/src/components/Timer.js\";\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\nimport { getIsTimerRunning, getTimerTimeDuration, getStartTime } from \"../redux/store\";\nimport { saveTimerDuration } from \"../redux/actions\";\n\nconst Timer = ({\n  isTimerRunning,\n  saveTimerTime,\n  timerDuration,\n  startTimeFromRedux\n}) => {\n  const [timerTime, setTimerTime] = useState(timerDuration);\n\n  const tick = startTimeFromRedux => {\n    let endTime = moment().format(\"HH:mm:ss\");\n    let diff = moment.utc(moment(endTime, \"HH:mm:ss\").diff(moment(startTimeFromRedux, \"HH:mm:ss\"))).format(\"HH:mm:ss\");\n    setTimerTime(diff);\n  };\n\n  useEffect(() => {\n    if (isTimerRunning) {\n      saveTimerTime(timerTime);\n      var timerID = setInterval(() => tick(startTimeFromRedux), 1000);\n    } else {\n      setTimerTime(\"00:00:00\");\n    }\n\n    if (timerTime === \"23:59:59\") {\n      clearInterval(timerID);\n    }\n\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  }, [timerTime, isTimerRunning, saveTimerTime, startTimeFromRedux]);\n  return React.createElement(\"div\", {\n    className: \"timerWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, timerTime);\n};\n\nconst mapStateToProps = state => ({\n  isTimerRunning: getIsTimerRunning(state),\n  timerDuration: getTimerTimeDuration(state),\n  startTimeFromRedux: getStartTime(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  saveTimerTime: value => dispatch(saveTimerDuration(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);","map":{"version":3,"sources":["/Users/alex/projects/tasks_timer/src/components/Timer.js"],"names":["React","useState","useEffect","moment","connect","getIsTimerRunning","getTimerTimeDuration","getStartTime","saveTimerDuration","Timer","isTimerRunning","saveTimerTime","timerDuration","startTimeFromRedux","timerTime","setTimerTime","tick","endTime","format","diff","utc","timerID","setInterval","clearInterval","cleanup","mapStateToProps","state","mapDispatchToProps","dispatch","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SACEC,iBADF,EAEEC,oBAFF,EAGEC,YAHF,QAIO,gBAJP;AAKA,SAASC,iBAAT,QAAkC,kBAAlC;;AAEA,MAAMC,KAAK,GAAG,CAAC;AACbC,EAAAA,cADa;AAEbC,EAAAA,aAFa;AAGbC,EAAAA,aAHa;AAIbC,EAAAA;AAJa,CAAD,KAKR;AACJ,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAACW,aAAD,CAA1C;;AAEA,QAAMI,IAAI,GAAGH,kBAAkB,IAAI;AACjC,QAAII,OAAO,GAAGd,MAAM,GAAGe,MAAT,CAAgB,UAAhB,CAAd;AAEA,QAAIC,IAAI,GAAGhB,MAAM,CACdiB,GADQ,CAEPjB,MAAM,CAACc,OAAD,EAAU,UAAV,CAAN,CAA4BE,IAA5B,CAAiChB,MAAM,CAACU,kBAAD,EAAqB,UAArB,CAAvC,CAFO,EAIRK,MAJQ,CAID,UAJC,CAAX;AAMAH,IAAAA,YAAY,CAACI,IAAD,CAAZ;AACD,GAVD;;AAYAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,cAAJ,EAAoB;AAClBC,MAAAA,aAAa,CAACG,SAAD,CAAb;AACA,UAAIO,OAAO,GAAGC,WAAW,CAAC,MAAMN,IAAI,CAACH,kBAAD,CAAX,EAAiC,IAAjC,CAAzB;AACD,KAHD,MAGO;AACLE,MAAAA,YAAY,CAAC,UAAD,CAAZ;AACD;;AAED,QAAID,SAAS,KAAK,UAAlB,EAA8B;AAC5BS,MAAAA,aAAa,CAACF,OAAD,CAAb;AACD;;AAED,WAAO,SAASG,OAAT,GAAmB;AACxBD,MAAAA,aAAa,CAACF,OAAD,CAAb;AACD,KAFD;AAGD,GAfQ,EAeN,CAACP,SAAD,EAAYJ,cAAZ,EAA4BC,aAA5B,EAA2CE,kBAA3C,CAfM,CAAT;AAiBA,SAAO;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BC,SAA/B,CAAP;AACD,CAtCD;;AAwCA,MAAMW,eAAe,GAAGC,KAAK,KAAK;AAChChB,EAAAA,cAAc,EAAEL,iBAAiB,CAACqB,KAAD,CADD;AAEhCd,EAAAA,aAAa,EAAEN,oBAAoB,CAACoB,KAAD,CAFH;AAGhCb,EAAAA,kBAAkB,EAAEN,YAAY,CAACmB,KAAD;AAHA,CAAL,CAA7B;;AAMA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACtCjB,EAAAA,aAAa,EAAEkB,KAAK,IAAID,QAAQ,CAACpB,iBAAiB,CAACqB,KAAD,CAAlB;AADM,CAAL,CAAnC;;AAIA,eAAezB,OAAO,CAACqB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ClB,KAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\n\nimport {\n  getIsTimerRunning,\n  getTimerTimeDuration,\n  getStartTime\n} from \"../redux/store\";\nimport { saveTimerDuration } from \"../redux/actions\";\n\nconst Timer = ({\n  isTimerRunning,\n  saveTimerTime,\n  timerDuration,\n  startTimeFromRedux\n}) => {\n  const [timerTime, setTimerTime] = useState(timerDuration);\n\n  const tick = startTimeFromRedux => {\n    let endTime = moment().format(\"HH:mm:ss\");\n\n    let diff = moment\n      .utc(\n        moment(endTime, \"HH:mm:ss\").diff(moment(startTimeFromRedux, \"HH:mm:ss\"))\n      )\n      .format(\"HH:mm:ss\");\n\n    setTimerTime(diff);\n  };\n\n  useEffect(() => {\n    if (isTimerRunning) {\n      saveTimerTime(timerTime);\n      var timerID = setInterval(() => tick(startTimeFromRedux), 1000);\n    } else {\n      setTimerTime(\"00:00:00\");\n    }\n\n    if (timerTime === \"23:59:59\") {\n      clearInterval(timerID);\n    }\n\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  }, [timerTime, isTimerRunning, saveTimerTime, startTimeFromRedux]);\n\n  return <div className=\"timerWrapper\">{timerTime}</div>;\n};\n\nconst mapStateToProps = state => ({\n  isTimerRunning: getIsTimerRunning(state),\n  timerDuration: getTimerTimeDuration(state),\n  startTimeFromRedux: getStartTime(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  saveTimerTime: value => dispatch(saveTimerDuration(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createStore, combineReducers } from \"redux\";\nimport { loadState, saveState } from \"../localStorage\";\nimport tasksReducer from \"./reducers/tasksReducer\";\nimport inputValueReducer from \"./reducers/inputValueReducer\";\nimport runTaskReducer from \"./reducers/runTaskReducer\";\nimport timerDurationReducer from \"./reducers/timerDurationReducer\";\nimport startTimeReducer from \"./reducers/startTimeReducer\"; // selectors\n\nexport const getIsTimerRunning = state => state.isTimerRunning;\nexport const getTasks = state => state.tasks;\nexport const getIsEmptyInput = state => state.isEmptyInput;\nexport const getTimerValueWhenStop = state => state.timerValueWhenStop;\nexport const getTimerTimeDuration = state => state.timerDuration;\nexport const getStartTime = state => state.startTime;\nconst rootReducer = combineReducers({\n  startTime: startTimeReducer,\n  isTimerRunning: runTaskReducer,\n  isEmptyInput: inputValueReducer,\n  tasks: tasksReducer,\n  timerDuration: timerDurationReducer\n});\nconst persistedState = loadState();\nconst store = createStore(rootReducer, persistedState);\nstore.subscribe(() => {\n  saveState({\n    startTime: store.getState().startTime,\n    isTimerRunning: store.getState().isTimerRunning,\n    isEmptyInput: store.getState().isEmptyInput,\n    tasks: store.getState().tasks\n  });\n});\nexport default store;","map":{"version":3,"sources":["/Users/alex/projects/task_timer/src/redux/store.js"],"names":["createStore","combineReducers","loadState","saveState","tasksReducer","inputValueReducer","runTaskReducer","timerDurationReducer","startTimeReducer","getIsTimerRunning","state","isTimerRunning","getTasks","tasks","getIsEmptyInput","isEmptyInput","getTimerValueWhenStop","timerValueWhenStop","getTimerTimeDuration","timerDuration","getStartTime","startTime","rootReducer","persistedState","store","subscribe","getState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,iBAArC;AAEA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,oBAAP,MAAiC,iCAAjC;AACA,OAAOC,gBAAP,MAA6B,6BAA7B,C,CAEA;;AACA,OAAO,MAAMC,iBAAiB,GAAGC,KAAK,IAAIA,KAAK,CAACC,cAAzC;AACP,OAAO,MAAMC,QAAQ,GAAGF,KAAK,IAAIA,KAAK,CAACG,KAAhC;AACP,OAAO,MAAMC,eAAe,GAAGJ,KAAK,IAAIA,KAAK,CAACK,YAAvC;AACP,OAAO,MAAMC,qBAAqB,GAAGN,KAAK,IAAIA,KAAK,CAACO,kBAA7C;AACP,OAAO,MAAMC,oBAAoB,GAAGR,KAAK,IAAIA,KAAK,CAACS,aAA5C;AACP,OAAO,MAAMC,YAAY,GAAGV,KAAK,IAAIA,KAAK,CAACW,SAApC;AAGP,MAAMC,WAAW,GAAGrB,eAAe,CAAC;AAClCoB,EAAAA,SAAS,EAAEb,gBADuB;AAElCG,EAAAA,cAAc,EAAEL,cAFkB;AAGlCS,EAAAA,YAAY,EAAEV,iBAHoB;AAIlCQ,EAAAA,KAAK,EAAET,YAJ2B;AAKlCe,EAAAA,aAAa,EAAEZ;AALmB,CAAD,CAAnC;AAQA,MAAMgB,cAAc,GAAGrB,SAAS,EAAhC;AACA,MAAMsB,KAAK,GAAGxB,WAAW,CACvBsB,WADuB,EAEvBC,cAFuB,CAAzB;AAMAC,KAAK,CAACC,SAAN,CAAgB,MAAM;AACpBtB,EAAAA,SAAS,CAAC;AACRkB,IAAAA,SAAS,EAAEG,KAAK,CAACE,QAAN,GAAiBL,SADpB;AAERV,IAAAA,cAAc,EAAEa,KAAK,CAACE,QAAN,GAAiBf,cAFzB;AAGRI,IAAAA,YAAY,EAAES,KAAK,CAACE,QAAN,GAAiBX,YAHvB;AAIRF,IAAAA,KAAK,EAAEW,KAAK,CAACE,QAAN,GAAiBb;AAJhB,GAAD,CAAT;AAMD,CAPD;AASA,eAAeW,KAAf","sourcesContent":["import { createStore, combineReducers } from \"redux\";\nimport { loadState, saveState } from \"../localStorage\";\n\nimport tasksReducer from \"./reducers/tasksReducer\";\nimport inputValueReducer from \"./reducers/inputValueReducer\";\nimport runTaskReducer from \"./reducers/runTaskReducer\";\nimport timerDurationReducer from \"./reducers/timerDurationReducer\";\nimport startTimeReducer from \"./reducers/startTimeReducer\";\n\n// selectors\nexport const getIsTimerRunning = state => state.isTimerRunning;\nexport const getTasks = state => state.tasks;\nexport const getIsEmptyInput = state => state.isEmptyInput;\nexport const getTimerValueWhenStop = state => state.timerValueWhenStop;\nexport const getTimerTimeDuration = state => state.timerDuration;\nexport const getStartTime = state => state.startTime;\n\n\nconst rootReducer = combineReducers({\n  startTime: startTimeReducer,\n  isTimerRunning: runTaskReducer,\n  isEmptyInput: inputValueReducer,\n  tasks: tasksReducer,\n  timerDuration: timerDurationReducer\n});\n\nconst persistedState = loadState();\nconst store = createStore(\n  rootReducer,\n  persistedState,\n);\n\n\nstore.subscribe(() => {\n  saveState({\n    startTime: store.getState().startTime,\n    isTimerRunning: store.getState().isTimerRunning,\n    isEmptyInput: store.getState().isEmptyInput,\n    tasks: store.getState().tasks\n  });\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}